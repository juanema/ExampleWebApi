<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ExampleWebApi.Core</name>
    </assembly>
    <members>
        <member name="T:ExampleWebApi.Core.Communications.ApiBaseResponse">
            <summary>
            Standard response for webApi methods
            </summary>
        </member>
        <member name="M:ExampleWebApi.Core.DependencyInjection.AutoRegister.RegisterServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registration entry point
            </summary>
        </member>
        <member name="M:ExampleWebApi.Core.DependencyInjection.AutoRegister.Register(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Override this method to perform configuration
            operations
            </summary>
        </member>
        <member name="T:ExampleWebApi.Core.DependencyInjection.ScanAndRegistry">
            <summary>
            Search AutoRegister class <see cref="T:ExampleWebApi.Core.DependencyInjection.AutoRegister"/> and run method register in every assembly
            </summary>
        </member>
        <member name="M:ExampleWebApi.Core.DependencyInjection.ScanAndRegistry.ScanAssemblies(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Scan assemblies and search AutoRegister type <see cref="T:ExampleWebApi.Core.DependencyInjection.AutoRegister"/> and run method register in every assembly
            </summary>
        </member>
        <member name="M:ExampleWebApi.Core.DependencyInjection.ScanAndRegistry.LoadExecutingAssemby">
             <summary>
             Adds executing assembly to scan queue
            </summary>
        </member>
        <member name="M:ExampleWebApi.Core.DependencyInjection.ScanAndRegistry.AddAssembliesFromPath(System.String)">
            <summary>
            Loads all assemblies from given path and try to
            add them to the aseembly to scan queue
            </summary>
        </member>
        <member name="M:ExampleWebApi.Core.DependencyInjection.ScanAndRegistry.AddAssemblyToScan(System.Reflection.Assembly)">
            <summary>
            Adds given assembly to the assembly to scan queue
            </summary>
        </member>
        <member name="M:ExampleWebApi.Core.DependencyInjection.ScanAndRegistry.ScanAll(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Scan all assemblies in assembly list to perform autoregistration
            </summary>
        </member>
        <member name="M:ExampleWebApi.Core.DependencyInjection.ScanAndRegistry.ScanAssemby(System.Reflection.Assembly,Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Scans given assembly to perform autoregistration
            </summary>
        </member>
        <member name="T:ExampleWebApi.Core.Domain.Models.IEntityWithTypedId`1">
            <summary>
            Interface contract for entities
            </summary>
            <typeparam name="TId">Id type</typeparam>
        </member>
        <member name="P:ExampleWebApi.Core.Domain.Models.IEntityWithTypedId`1.Id">
            <summary>
            Unique identifier in the data layer
            </summary>
            <remarks>
            Write access is intended for domain assigned
            ids, do not use when the id is assignewd in 
            the data layer
            </remarks>
        </member>
        <member name="T:ExampleWebApi.Core.Domain.Models.Entity`1">
            <summary>
            Base class for all entities
            </summary>
            <typeparam name="TId">
            Id may be of type string, int, custom type, etc.
            Setter is protected to allow unit tests to set this property via reflection and to allow 
            domain objects more flexibility in setting this for those objects with assigned Ids.
            </typeparam>
        </member>
        <member name="M:ExampleWebApi.Core.Extensions.ObjectExtensions.ThrowExceptionIfNull(System.Object)">
            <summary>
            Throw ArgumentNullException with the object name if the object is null
            </summary>
            <param name="notNullable">an object</param>
        </member>
        <member name="T:ExampleWebApi.Core.Guard">
            <summary>
            Design by Contract
            Provides utility methods to guard parameter and local variables.
            </summary>
        </member>
        <member name="M:ExampleWebApi.Core.Guard.Against``1(System.Boolean,System.String)">
            <summary>
            Throws an exception of type <typeparamref name="TException"/> with the specified message
            when the assertion statement is true.
            </summary>
            <typeparam name="TException">The type of exception to throw.</typeparam>
            <param name="assertion">The assertion to evaluate. If true then the <typeparamref name="TException"/> exception is thrown.</param>
            <param name="message">string. The exception message to throw.</param>
        </member>
        <member name="M:ExampleWebApi.Core.Guard.Against``1(System.Func{System.Boolean},System.String)">
            <summary>
            Throws an exception of type <typeparamref name="TException"/> with the specified message
            when the assertion
            </summary>
            <typeparam name="TException"></typeparam>
            <param name="assertion"></param>
            <param name="message"></param>
        </member>
        <member name="M:ExampleWebApi.Core.Guard.InheritsFrom``1(System.Object,System.String)">
            <summary>
            Throws a <see cref="T:System.InvalidOperationException"/> when the specified object
            instance does not inherit from <typeparamref name="TBase"/> type.
            </summary>
            <typeparam name="TBase">The base type to check for.</typeparam>
            <param name="instance">The object to check if it inherits from <typeparamref name="TBase"/> type.</param>
            <param name="message">string. The exception message to throw.</param>
        </member>
        <member name="M:ExampleWebApi.Core.Guard.InheritsFrom``1(System.Type,System.String)">
            <summary>
            Throws a <see cref="T:System.InvalidOperationException"/> when the specified type does not
            inherit from the <typeparamref name="TBase"/> type.
            </summary>
            <typeparam name="TBase">The base type to check for.</typeparam>
            <param name="type">The <see cref="T:System.Type"/> to check if it inherits from <typeparamref name="TBase"/> type.</param>
            <param name="message">string. The exception message to throw.</param>
        </member>
        <member name="M:ExampleWebApi.Core.Guard.Implements``1(System.Object,System.String)">
            <summary>
            Throws a <see cref="T:System.InvalidOperationException"/> when the specified object
            instance does not implement the <typeparamref name="TInterface"/> interface.
            </summary>
            <typeparam name="TInterface">The interface type the object instance should implement.</typeparam>
            <param name="instance">The object insance to check if it implements the <typeparamref name="TInterface"/> interface</param>
            <param name="message">string. The exception message to throw.</param>
        </member>
        <member name="M:ExampleWebApi.Core.Guard.Implements``1(System.Type,System.String)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> when the specified type does not
            implement the <typeparamref name="TInterface"/> interface.
            </summary>
            <typeparam name="TInterface">The interface type that the <paramref name="type"/> should implement.</typeparam>
            <param name="type">The <see cref="T:System.Type"/> to check if it implements from <typeparamref name="TInterface"/> interface.</param>
            <param name="message">string. The exception message to throw.</param>
        </member>
        <member name="M:ExampleWebApi.Core.Guard.TypeOf``1(System.Object,System.String)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> when the specified object instance is
            not of the specified type.
            </summary>
            <typeparam name="TType">The Type that the <paramref name="instance"/> is expected to be.</typeparam>
            <param name="instance">The object instance whose type is checked.</param>
            <param name="message">The message of the <see cref="T:System.InvalidOperationException"/> exception.</param>
        </member>
        <member name="M:ExampleWebApi.Core.Guard.IsEqual``1(System.Object,System.Object,System.String)">
            <summary>
            Throws an exception if an instance of an object is not equal to another object instance.
            </summary>
            <typeparam name="TException">The type of exception to throw when the guard check evaluates false.</typeparam>
            <param name="compare">The comparison object.</param>
            <param name="instance">The object instance to compare with.</param>
            <param name="message">string. The message of the exception.</param>
        </member>
        <member name="T:ExampleWebApi.Core.Persistence.Repositories.IRepository`2">
            <summary>
            Repository pattern interface
            </summary>
        </member>
        <member name="P:ExampleWebApi.Core.Persistence.Repositories.IRepository`2.UnitOfWork">
            <summary>
            Reference to the unit of work the repository
            is running in
            </summary>
        </member>
        <member name="M:ExampleWebApi.Core.Persistence.Repositories.IRepository`2.ListAsync">
            <summary>
            Retrieve all elements
            </summary>        
        </member>
        <member name="M:ExampleWebApi.Core.Persistence.Repositories.IRepository`2.AddAsync(`0)">
            <summary>
            Add element
            </summary>
            <param name="element">Element</param>        
        </member>
        <member name="M:ExampleWebApi.Core.Persistence.Repositories.IRepository`2.FindByIdAsync(`1)">
            <summary>
            Search by primary key
            </summary>
            <param name="id">Primary key</param>        
        </member>
        <member name="M:ExampleWebApi.Core.Persistence.Repositories.IRepository`2.Update(`0)">
            <summary>
            Update element
            </summary>
            <param name="element">Element</param>
        </member>
        <member name="M:ExampleWebApi.Core.Persistence.Repositories.IRepository`2.Remove(`0)">
            <summary>
            Delete element
            </summary>
            <param name="element">Element</param>
        </member>
        <member name="T:ExampleWebApi.Core.Persistence.Repositories.IRepository`1">
            <summary>
            Most of the entities have a surrogate key, so
            most of the repositories will be have a long 
            identifier
            </summary>
        </member>
    </members>
</doc>
